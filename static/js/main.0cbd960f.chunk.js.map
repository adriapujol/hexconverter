{"version":3,"sources":["ColorDisplay.js","App.js","index.js"],"names":["ColorDisplay","bg","txtColor","txt","rgbNum","color","rgbColor","invertedColor","rgbInverted","isInverted","join","className","id","style","backgroundColor","App","props","state","handleInputColor","bind","handleInvertColor","this","setState","prevState","e","inputColor","target","value","length","isHexColor","rgbInput","convert2RGB","inverted","invertHEX","rgbInvert","type","maxLength","placeholder","onChange","onClick","Component","hex","rgb","i","push","parseInt","concat","r","toString","g","b","padZero","isNaN","Number","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA0BeA,MAxBf,YAAoF,IAExEC,EAAIC,EAAUC,EAAKC,EAFPC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,YAehD,OAf2E,EAAdC,YAIzDR,EAAKM,EACLL,EAAWG,EACXF,EAAMI,EACNH,EAASI,EAAYE,KAAK,OAE1BT,EAAKI,EACLH,EAAWK,EACXJ,EAAME,EACND,EAASE,EAASI,KAAK,MAIvB,yBAAKC,UAAU,QAAQC,GAAG,QAAQC,MAAO,CAACC,gBAAgB,IAAD,OAAMb,KAC3D,wBAAIU,UAAU,2BAA2BC,GAAG,aAAaC,MAAO,CAACR,MAAM,IAAD,OAAMH,KAA5E,IAA2FC,GAC3F,wBAAIQ,UAAU,aAAaC,GAAG,iBAAiBC,MAAO,CAACR,MAAM,IAAD,OAAMH,KAAlE,OAAoFE,EAApF,OC6DDW,E,kDA5Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXZ,MAAO,GACPC,SAAU,GACVC,cAAe,GACfC,YAAa,GACbC,YAAY,GAGd,EAAKS,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAXR,E,gEA4BjBE,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1Bd,YAAac,EAAUd,iB,uCAIVe,GACf,IAAMC,EAAaD,EAAEE,OAAOC,MAC5B,GAA0B,IAAtBF,EAAWG,QAAgBC,EAAWJ,GAAa,CACrD,IAAIK,EAAWC,EAAYN,GACvBO,EAAWC,EAAUR,GACrBS,EAAYH,EAAYC,GAE5BX,KAAKC,SAAS,CACZjB,MAAOoB,EACPnB,SAAUwB,EACVvB,cAAeyB,EACfxB,YAAa0B,O,+BASjB,OACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,SAAQ,6CACvB,yBAAKA,UAAU,UACb,iCACG,2BAAOwB,KAAK,OAAOC,UAAU,IAAIzB,UAAU,MAAMC,GAAG,MAAMyB,YAAY,aAAaC,SAAUjB,KAAKH,oBAErG,yBAAKP,UAAU,aACb,4BAAQA,UAAU,aAAaC,GAAG,aAAa2B,QAASlB,KAAKD,mBAA7D,mBAGJ,kBAAC,EAAD,CAAcf,MAAOgB,KAAKJ,MAAMZ,MAAOC,SAAUe,KAAKJ,MAAMX,SAAUC,cAAec,KAAKJ,MAAMV,cAAeC,YAAaa,KAAKJ,MAAMT,YAAaC,WAAYY,KAAKJ,MAAMR,aAC3K,gCACE,kD,GAnEQ+B,aAoFZT,EAAc,SAACU,GAEnB,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAI,EAAGA,GAAG,EACtBD,EAAIE,KAAKC,SAASJ,EAAIE,GAAGG,OAAOL,EAAIE,EAAE,IAAK,KAE/C,OAAOD,GAMHT,EAAY,SAACQ,GACjB,IAAIC,EAAMX,EAAYU,GAClBM,GAAK,IAAML,EAAI,IAAIM,SAAS,IAC5BC,GAAK,IAAMP,EAAI,IAAIM,SAAS,IAC5BE,GAAK,IAAMR,EAAI,IAAIM,SAAS,IAEhC,OAAOG,EAAQJ,GAAKI,EAAQF,GAAKE,EAAQD,IAenCrB,EAAa,SAAAY,GAAG,MAAmB,kBAARA,GAAmC,IAAfA,EAAIb,SAAiBwB,MAAMC,OAAO,KAAOZ,KAIxFU,EAAU,SAACG,GAIf,OAHGA,EAAI1B,OAAS,IACZ0B,EAAM,IAAMA,GAETA,GC3HXC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.0cbd960f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ColorDisplay({ color, rgbColor, invertedColor, rgbInverted, isInverted }) {\r\n\r\n        let bg, txtColor, txt, rgbNum;\r\n        if (isInverted) {\r\n            bg = invertedColor;\r\n            txtColor = color;\r\n            txt = invertedColor;\r\n            rgbNum = rgbInverted.join(',');\r\n        } else {\r\n            bg = color;\r\n            txtColor = invertedColor;\r\n            txt = color;\r\n            rgbNum = rgbColor.join(',');\r\n        }\r\n\r\n        return (\r\n            <div className=\"color\" id=\"color\" style={{backgroundColor: `#${bg}`}}>\r\n                <h1 className=\"color-text uppercase-txt\" id=\"color-text\" style={{color: `#${txtColor}`}}>#{txt}</h1>\r\n                <h1 className=\"color-text\" id=\"color-text-rgb\" style={{color: `#${txtColor}`}}>rgb({rgbNum})</h1>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default ColorDisplay;","import React, { Component } from 'react';\nimport './ColorDisplay';\nimport ColorDisplay from './ColorDisplay';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: '',\n      rgbColor: [],\n      invertedColor: '',\n      rgbInverted: '',\n      isInverted: false\n    };\n\n    this.handleInputColor = this.handleInputColor.bind(this);\n    this.handleInvertColor = this.handleInvertColor.bind(this);\n  \n  }\n\n\n  handleInvertColor() {\n    // const hex = this.state.color;\n    // if(!isHexColor(hex)) return;\n    // const rgb = convert2RGB(hex);\n    // const invert = invertHEX(hex);\n    // const rgbInvert = convert2RGB(invert);\n    // this.setState({\n    //   color: hex,\n    //   rgbColor: rgb,\n    //   invertedColor: invert,\n    //   rgbInverted: rgbInvert\n    // })\n    this.setState(prevState => ({\n      isInverted: !prevState.isInverted\n    }));\n  }\n\n  handleInputColor(e) {\n    const inputColor = e.target.value;\n    if (inputColor.length === 6 && isHexColor(inputColor)) {\n      let rgbInput = convert2RGB(inputColor);\n      let inverted = invertHEX(inputColor);\n      let rgbInvert = convert2RGB(inverted);\n\n      this.setState({\n        color: inputColor,\n        rgbColor: rgbInput,\n        invertedColor: inverted,\n        rgbInverted: rgbInvert\n      })\n      \n    }\n      \n  }\n\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"title\"><span>HEX to RGB</span></div>\n        <div className=\"inputs\">\n          <div>\n            #<input type=\"text\" maxLength=\"6\" className=\"hex\" id=\"hex\" placeholder=\"HEX number\" onChange={this.handleInputColor}></input>\n          </div>\n          <div className=\"btn-block\">\n            <button className=\"btn-invert\" id=\"btn-invert\" onClick={this.handleInvertColor}>complementary</button>\n          </div>\n        </div>\n        <ColorDisplay color={this.state.color} rgbColor={this.state.rgbColor} invertedColor={this.state.invertedColor} rgbInverted={this.state.rgbInverted} isInverted={this.state.isInverted} />\n        <footer>\n          <p>\n            by adrienhill\n          </p>\n        </footer>\n  \n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//========FUNCTIONS ==============//\n\n\n// HEX to RGB converter\n\nconst convert2RGB = (hex) => {\n  const rgb = [];\n  for (let i = 0; i < 6; i+=2) {\n      rgb.push(parseInt(hex[i].concat(hex[i+1]), 16));     \n  }\n  return rgb;\n};\n\n\n//invert HEX color\n\nconst invertHEX = (hex) => {\n  let rgb = convert2RGB(hex);\n  let r = (255 - rgb[0]).toString(16);\n  let g = (255 - rgb[1]).toString(16);\n  let b = (255 - rgb[2]).toString(16);\n  \n  return padZero(r) + padZero(g) + padZero(b);\n}\n\n\n//WRONG NUMBER\n\n// const wrongHEX = () => {\n//   colorText.style.color = \"#FFFFFF\";\n//   colorText.innerHTML = \"Not a valid number\";\n//   color.style.backgroundColor = \"#000000\";\n//   // alert(\"Not a valid number. Make sure it has 6 characters\");\n// };\n\n  //IS HEX VALID\n\n  const isHexColor = hex => typeof hex === 'string' && hex.length === 6 && !isNaN(Number('0x' + hex));\n\n  //PAD with Zero\n\n  const padZero = (str) => {\n    if(str.length < 2) {\n        str = '0' + str;\n    }\n    return str;\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}