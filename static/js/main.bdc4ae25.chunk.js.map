{"version":3,"sources":["ColorDisplay.js","App.js","index.js"],"names":["ColorDisplay","color","rgbColor","bgColor","bgInverted","isInverted","textColor","rgbNum","join","bg","className","id","style","backgroundColor","App","props","state","handleDisplayColor","bind","handleInputColor","handleInvertColor","hex","this","isHexColor","rgb","convert2RGB","txtColor","invertHEX","setState","invertedColor","e","inputColor","target","value","rgbInput","length","type","maxLength","onChange","onClick","Component","i","push","parseInt","concat","r","toString","g","b","padZero","isNaN","Number","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdc4ae25.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ColorDisplay({ color, rgbColor, bgColor, bgInverted, isInverted, textColor }) {\r\n\r\n        // const colorStyles = `backgroundColor: #00ffff`;\r\n        const rgbNum = rgbColor.join(',');\r\n        let bg = bgColor;\r\n        if (isInverted) bg=bgInverted;\r\n\r\n        return (\r\n            <div className=\"color\" id=\"color\" style={{backgroundColor: `#${bg}`}}>\r\n                <h1 className=\"color-text\" id=\"color-text\" style={{color: `#${textColor}`}}>#{color}</h1>\r\n                <h1 className=\"color-text\" id=\"color-text-rgb\" style={{color: `#${textColor}`}}>rgb({rgbNum})</h1>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default ColorDisplay;","import React, { Component } from 'react';\r\nimport './ColorDisplay';\r\nimport ColorDisplay from './ColorDisplay';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: '',\r\n      rgbColor: [],\r\n      bgColor: '',\r\n      bgInverted: '',\r\n      textColor: '',\r\n      isInverted: false\r\n    };\r\n\r\n    this.handleDisplayColor = this.handleDisplayColor.bind(this);\r\n    this.handleInputColor = this.handleInputColor.bind(this);\r\n    this.handleInvertColor = this.handleInvertColor.bind(this);\r\n  \r\n  }\r\n\r\n\r\n  handleDisplayColor() {\r\n    const hex = this.state.color;\r\n    if(!isHexColor(hex)) return;\r\n    const rgb = convert2RGB(hex);\r\n    const txtColor = invertHEX(hex);\r\n    this.setState({\r\n      color: hex,\r\n      rgbColor: rgb,\r\n      bgColor: hex,\r\n      textColor: txtColor,\r\n      isInverted: false\r\n    })\r\n  }\r\n\r\n  handleInvertColor(){\r\n    const color = this.state.color;\r\n    const invertedColor = invertHEX(color);\r\n    if(!isHexColor(color)) return;\r\n    this.setState({\r\n      bgInverted: invertedColor,\r\n      textColor: color,\r\n      isInverted: true\r\n    })\r\n  }\r\n\r\n  handleInputColor(e) {\r\n    const inputColor = e.target.value;\r\n    let rgbInput = [];\r\n    if (inputColor.length === 6 && isHexColor(inputColor)) {\r\n      rgbInput = convert2RGB(inputColor);\r\n      this.setState({\r\n        color: inputColor,\r\n        rgbColor: rgbInput\r\n      })\r\n      \r\n    } \r\n      \r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"title\"><span>HEX to RGB</span></div>\r\n        <div className=\"inputs\">\r\n          <div>\r\n            #<input type=\"text\" maxLength=\"6\" className=\"hex\" id=\"hex\" onChange={this.handleInputColor}></input>\r\n          </div>\r\n          <div className=\"btn-block\">\r\n            <button className=\"btn-display\" id=\"btn-display\" onClick={this.handleDisplayColor}>display</button>\r\n            <button className=\"btn-invert\" id=\"btn-invert\" onClick={this.handleInvertColor}>complementary</button>\r\n            {/* <button className=\"btn-rgb\" id=\"btn-rgb\">rgb</button> */}\r\n          </div>\r\n        </div>\r\n        <ColorDisplay color={this.state.color} rgbColor={this.state.rgbColor} bgColor={this.state.bgColor} bgInverted={this.state.bgInverted} isInverted={this.state.isInverted} textColor={this.state.textColor}/>\r\n        <footer>\r\n          <p>\r\n            by adrienhill\r\n          </p>\r\n        </footer>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//========FUNCTIONS ==============//\r\n\r\n\r\n// HEX to RGB converter\r\n\r\nconst convert2RGB = (hex) => {\r\n  const rgb = [];\r\n  for (let i = 0; i < 6; i+=2) {\r\n      rgb.push(parseInt(hex[i].concat(hex[i+1]), 16));     \r\n  }\r\n  return rgb;\r\n};\r\n\r\n\r\n//invert HEX color\r\n\r\nconst invertHEX = (hex) => {\r\n  let rgb = convert2RGB(hex);\r\n  let r = (255 - rgb[0]).toString(16);\r\n  let g = (255 - rgb[1]).toString(16);\r\n  let b = (255 - rgb[2]).toString(16);\r\n  \r\n  return padZero(r) + padZero(g) + padZero(b);\r\n}\r\n\r\n\r\n//WRONG NUMBER\r\n\r\n// const wrongHEX = () => {\r\n//   colorText.style.color = \"#FFFFFF\";\r\n//   colorText.innerHTML = \"Not a valid number\";\r\n//   color.style.backgroundColor = \"#000000\";\r\n//   // alert(\"Not a valid number. Make sure it has 6 characters\");\r\n// };\r\n\r\n  //IS HEX VALID\r\n\r\n  const isHexColor = hex => typeof hex === 'string' && hex.length === 6 && !isNaN(Number('0x' + hex));\r\n\r\n  //PAD with Zero\r\n\r\n  const padZero = (str) => {\r\n    if(str.length < 2) {\r\n        str = '0' + str;\r\n    }\r\n    return str;\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}