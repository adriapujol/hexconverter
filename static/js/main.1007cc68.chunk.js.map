{"version":3,"sources":["ColorDisplay.js","App.js","index.js"],"names":["ColorDisplay","bg","txtColor","txt","rgbNum","color","rgbColor","invertedColor","rgbInverted","isInverted","join","className","id","style","backgroundColor","App","props","state","handleInputColor","bind","handleInvertColor","this","setState","prevState","e","inputColor","target","value","length","isHexColor","rgbInput","convert2RGB","inverted","invertHEX","rgbInvert","type","maxLength","placeholder","onChange","onClick","Component","hex","rgb","i","push","parseInt","concat","r","toString","g","b","padZero","isNaN","Number","str","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNA0BeA,MAxBf,YAAoF,IAExEC,EAAIC,EAAUC,EAAKC,EAFPC,EAA2D,EAA3DA,MAAOC,EAAoD,EAApDA,SAAUC,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,YAehD,OAf2E,EAAdC,YAIzDR,EAAKM,EACLL,EAAWG,EACXF,EAAMI,EACNH,EAASI,EAAYE,KAAK,OAE1BT,EAAKI,EACLH,EAAWK,EACXJ,EAAME,EACND,EAASE,EAASI,KAAK,MAIvB,yBAAKC,UAAU,QAAQC,GAAG,QAAQC,MAAO,CAACC,gBAAgB,IAAD,OAAMb,KAC3D,wBAAIU,UAAU,2BAA2BC,GAAG,aAAaC,MAAO,CAACR,MAAM,IAAD,OAAMH,KAA5E,IAA2FC,GAC3F,wBAAIQ,UAAU,aAAaC,GAAG,iBAAiBC,MAAO,CAACR,MAAM,IAAD,OAAMH,KAAlE,OAAoFE,EAApF,OCmDDW,E,kDAlEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXZ,MAAO,GACPC,SAAU,GACVC,cAAe,GACfC,YAAa,GACbC,YAAY,GAGd,EAAKS,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBAXR,E,gEAiBZE,KAAKJ,MAAMZ,OAChBgB,KAAKC,UAAS,SAAAC,GAAS,MAAK,CAC1Bd,YAAac,EAAUd,iB,uCAIVe,GACf,IAAMC,EAAaD,EAAEE,OAAOC,MAC5B,GAA0B,IAAtBF,EAAWG,QAAgBC,EAAWJ,GAAa,CACrD,IAAIK,EAAWC,EAAYN,GACvBO,EAAWC,EAAUR,GACrBS,EAAYH,EAAYC,GAE5BX,KAAKC,SAAS,CACZjB,MAAOoB,EACPnB,SAAUwB,EACVvB,cAAeyB,EACfxB,YAAa0B,O,+BASjB,OACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,SAAQ,6CACvB,yBAAKA,UAAU,UACb,iCACG,2BAAOwB,KAAK,OAAOC,UAAU,IAAIzB,UAAU,MAAMC,GAAG,MAAMyB,YAAY,aAAaC,SAAUjB,KAAKH,oBAErG,yBAAKP,UAAU,aACb,4BAAQA,UAAU,aAAaC,GAAG,aAAa2B,QAASlB,KAAKD,mBAA7D,mBAGJ,kBAAC,EAAD,CAAcf,MAAOgB,KAAKJ,MAAMZ,MAAOC,SAAUe,KAAKJ,MAAMX,SAAUC,cAAec,KAAKJ,MAAMV,cAAeC,YAAaa,KAAKJ,MAAMT,YAAaC,WAAYY,KAAKJ,MAAMR,aAC3K,gCACE,kD,GAzDQ+B,aA0EZT,EAAc,SAACU,GAEnB,IADA,IAAMC,EAAM,GACHC,EAAI,EAAGA,EAAI,EAAGA,GAAG,EACtBD,EAAIE,KAAKC,SAASJ,EAAIE,GAAGG,OAAOL,EAAIE,EAAE,IAAK,KAE/C,OAAOD,GAMHT,EAAY,SAACQ,GACjB,IAAIC,EAAMX,EAAYU,GAClBM,GAAK,IAAML,EAAI,IAAIM,SAAS,IAC5BC,GAAK,IAAMP,EAAI,IAAIM,SAAS,IAC5BE,GAAK,IAAMR,EAAI,IAAIM,SAAS,IAEhC,OAAOG,EAAQJ,GAAKI,EAAQF,GAAKE,EAAQD,IAenCrB,EAAa,SAAAY,GAAG,MAAmB,kBAARA,GAAmC,IAAfA,EAAIb,SAAiBwB,MAAMC,OAAO,KAAOZ,KAIxFU,EAAU,SAACG,GAIf,OAHGA,EAAI1B,OAAS,IACZ0B,EAAM,IAAMA,GAETA,GCjHXC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.1007cc68.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction ColorDisplay({ color, rgbColor, invertedColor, rgbInverted, isInverted }) {\r\n\r\n        let bg, txtColor, txt, rgbNum;\r\n        if (isInverted) {\r\n            bg = invertedColor;\r\n            txtColor = color;\r\n            txt = invertedColor;\r\n            rgbNum = rgbInverted.join(',');\r\n        } else {\r\n            bg = color;\r\n            txtColor = invertedColor;\r\n            txt = color;\r\n            rgbNum = rgbColor.join(',');\r\n        }\r\n\r\n        return (\r\n            <div className=\"color\" id=\"color\" style={{backgroundColor: `#${bg}`}}>\r\n                <h1 className=\"color-text uppercase-txt\" id=\"color-text\" style={{color: `#${txtColor}`}}>#{txt}</h1>\r\n                <h1 className=\"color-text\" id=\"color-text-rgb\" style={{color: `#${txtColor}`}}>rgb({rgbNum})</h1>\r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nexport default ColorDisplay;","import React, { Component } from 'react';\r\nimport './ColorDisplay';\r\nimport ColorDisplay from './ColorDisplay';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      color: '',\r\n      rgbColor: [],\r\n      invertedColor: '',\r\n      rgbInverted: '',\r\n      isInverted: false\r\n    };\r\n\r\n    this.handleInputColor = this.handleInputColor.bind(this);\r\n    this.handleInvertColor = this.handleInvertColor.bind(this);\r\n  \r\n  }\r\n\r\n\r\n  handleInvertColor() {\r\n    if (!this.state.color) return;\r\n    this.setState(prevState => ({\r\n      isInverted: !prevState.isInverted\r\n    }));\r\n  }\r\n\r\n  handleInputColor(e) {\r\n    const inputColor = e.target.value;\r\n    if (inputColor.length === 6 && isHexColor(inputColor)) {\r\n      let rgbInput = convert2RGB(inputColor);\r\n      let inverted = invertHEX(inputColor);\r\n      let rgbInvert = convert2RGB(inverted);\r\n\r\n      this.setState({\r\n        color: inputColor,\r\n        rgbColor: rgbInput,\r\n        invertedColor: inverted,\r\n        rgbInverted: rgbInvert\r\n      })\r\n      \r\n    }\r\n      \r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"title\"><span>HEX to RGB</span></div>\r\n        <div className=\"inputs\">\r\n          <div>\r\n            #<input type=\"text\" maxLength=\"6\" className=\"hex\" id=\"hex\" placeholder=\"HEX number\" onChange={this.handleInputColor}></input>\r\n          </div>\r\n          <div className=\"btn-block\">\r\n            <button className=\"btn-invert\" id=\"btn-invert\" onClick={this.handleInvertColor}>complementary</button>\r\n          </div>\r\n        </div>\r\n        <ColorDisplay color={this.state.color} rgbColor={this.state.rgbColor} invertedColor={this.state.invertedColor} rgbInverted={this.state.rgbInverted} isInverted={this.state.isInverted} />\r\n        <footer>\r\n          <p>\r\n            by adrienhill\r\n          </p>\r\n        </footer>\r\n  \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//========FUNCTIONS ==============//\r\n\r\n\r\n// HEX to RGB converter\r\n\r\nconst convert2RGB = (hex) => {\r\n  const rgb = [];\r\n  for (let i = 0; i < 6; i+=2) {\r\n      rgb.push(parseInt(hex[i].concat(hex[i+1]), 16));     \r\n  }\r\n  return rgb;\r\n};\r\n\r\n\r\n//invert HEX color\r\n\r\nconst invertHEX = (hex) => {\r\n  let rgb = convert2RGB(hex);\r\n  let r = (255 - rgb[0]).toString(16);\r\n  let g = (255 - rgb[1]).toString(16);\r\n  let b = (255 - rgb[2]).toString(16);\r\n  \r\n  return padZero(r) + padZero(g) + padZero(b);\r\n}\r\n\r\n\r\n//WRONG NUMBER\r\n\r\n// const wrongHEX = () => {\r\n//   colorText.style.color = \"#FFFFFF\";\r\n//   colorText.innerHTML = \"Not a valid number\";\r\n//   color.style.backgroundColor = \"#000000\";\r\n//   // alert(\"Not a valid number. Make sure it has 6 characters\");\r\n// };\r\n\r\n  //IS HEX VALID\r\n\r\n  const isHexColor = hex => typeof hex === 'string' && hex.length === 6 && !isNaN(Number('0x' + hex));\r\n\r\n  //PAD with Zero\r\n\r\n  const padZero = (str) => {\r\n    if(str.length < 2) {\r\n        str = '0' + str;\r\n    }\r\n    return str;\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}